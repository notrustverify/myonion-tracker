/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { NetworkId } from "@alephium/web3";
import {
  Token,
  TokenInstance,
  FeeHandler,
  FeeHandlerInstance,
  FeeCollector,
  FeeCollectorInstance,
  OnionRouter,
  OnionRouterInstance,
  BondingPair,
  BondingPairInstance,
  DexPair,
  DexPairInstance,
  TokenLauncher,
  TokenLauncherInstance,
  ProfileTracker,
  ProfileTrackerInstance,
  CommentTracker,
  CommentTrackerInstance,
} from ".";
import { default as mainnetDeployments } from "../../deployments/.deployments.mainnet.json";
import { default as testnetDeployments } from "../../deployments/.deployments.testnet.json";

// Define types for deployment results
type DeployContractExecutionResult<T> = {
  contractInstance: T;
  [key: string]: any;
};

type RunScriptResult = {
  [key: string]: any;
};

export type Deployments = {
  deployerAddress: string;
  contracts: {
    Token: DeployContractExecutionResult<TokenInstance>;
    FeeHandler: DeployContractExecutionResult<FeeHandlerInstance>;
    FeeCollector: DeployContractExecutionResult<FeeCollectorInstance>;
    OnionRouter: DeployContractExecutionResult<OnionRouterInstance>;
    BondingPair: DeployContractExecutionResult<BondingPairInstance>;
    DexPair: DeployContractExecutionResult<DexPairInstance>;
    TokenLauncher: DeployContractExecutionResult<TokenLauncherInstance>;
    ProfileTracker: DeployContractExecutionResult<ProfileTrackerInstance>;
    CommentTracker: DeployContractExecutionResult<CommentTrackerInstance>;
  };
  scripts: { SetFeeCollector: RunScriptResult };
};

function toDeployments(json: any): Deployments {
  const contracts = {
    Token: {
      ...json.contracts["Token"],
      contractInstance: Token.at(
        json.contracts["Token"].contractInstance.address
      ),
    },
    FeeHandler: {
      ...json.contracts["FeeHandler"],
      contractInstance: FeeHandler.at(
        json.contracts["FeeHandler"].contractInstance.address
      ),
    },
    FeeCollector: {
      ...json.contracts["FeeCollector"],
      contractInstance: FeeCollector.at(
        json.contracts["FeeCollector"].contractInstance.address
      ),
    },
    OnionRouter: {
      ...json.contracts["OnionRouter"],
      contractInstance: OnionRouter.at(
        json.contracts["OnionRouter"].contractInstance.address
      ),
    },
    BondingPair: {
      ...json.contracts["BondingPair"],
      contractInstance: BondingPair.at(
        json.contracts["BondingPair"].contractInstance.address
      ),
    },
    DexPair: {
      ...json.contracts["DexPair"],
      contractInstance: DexPair.at(
        json.contracts["DexPair"].contractInstance.address
      ),
    },
    TokenLauncher: {
      ...json.contracts["TokenLauncher"],
      contractInstance: TokenLauncher.at(
        json.contracts["TokenLauncher"].contractInstance.address
      ),
    },
    ProfileTracker: {
      ...json.contracts["ProfileTracker"],
      contractInstance: ProfileTracker.at(
        json.contracts["ProfileTracker"].contractInstance.address
      ),
    },
    CommentTracker: {
      ...json.contracts["CommentTracker"],
      contractInstance: CommentTracker.at(
        json.contracts["CommentTracker"].contractInstance.address
      ),
    },
  };
  return {
    ...json,
    contracts: contracts as Deployments["contracts"],
    scripts: { SetFeeCollector: json.scripts["SetFeeCollector"] },
  };
}

export function loadDeployments(
  networkId: NetworkId,
  deployerAddress?: string
): Deployments {
  const deployments =
    networkId === "mainnet"
      ? mainnetDeployments
      : networkId === "testnet"
      ? testnetDeployments
      : undefined;
  if (deployments === undefined) {
    throw Error("The contract has not been deployed to the " + networkId);
  }
  const allDeployments: any[] = Array.isArray(deployments)
    ? deployments
    : [deployments];
  if (deployerAddress === undefined) {
    if (allDeployments.length > 1) {
      throw Error(
        "The contract has been deployed multiple times on " +
          networkId +
          ", please specify the deployer address"
      );
    } else {
      return toDeployments(allDeployments[0]);
    }
  }
  const result = allDeployments.find(
    (d) => d.deployerAddress === deployerAddress
  );
  if (result === undefined) {
    throw Error("The contract deployment result does not exist");
  }
  return toDeployments(result);
}
