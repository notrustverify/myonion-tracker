"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnionRouterInstance = exports.OnionRouter = void 0;
const web3_1 = require("@alephium/web3");
const OnionRouter_ral_json_1 = __importDefault(require("../trade/OnionRouter.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.eventIndex = {
            ChangeOwnerCommence: 0,
            ChangeOwnerApply: 1,
            MigrateCommence: 2,
            MigrateApply: 3,
            MigrateWithFieldsApply: 4,
            Trade: 5,
        };
        this.consts = {
            UpgradeErrorCodes: {
                Forbidden: BigInt("13000"),
                UpgradePending: BigInt("13001"),
                UpgradeNotPending: BigInt("13002"),
                UpgradeDelayNotExpired: BigInt("13003"),
                MigrateNotPending: BigInt("13004"),
                MigrateWithFieldsNotPending: BigInt("13005"),
                ChangeOwnerNotPending: BigInt("13006"),
            },
            RouterErrors: { Expired: BigInt("1"), SlippageTooHigh: BigInt("2") },
        };
        this.tests = {
            changeOwner: async (params) => {
                return (0, web3_1.testMethod)(this, "changeOwner", params, contracts_1.getContractByCodeHash);
            },
            migrate: async (params) => {
                return (0, web3_1.testMethod)(this, "migrate", params, contracts_1.getContractByCodeHash);
            },
            changeOwnerApply: async (params) => {
                return (0, web3_1.testMethod)(this, "changeOwnerApply", params, contracts_1.getContractByCodeHash);
            },
            migrateApply: async (params) => {
                return (0, web3_1.testMethod)(this, "migrateApply", params, contracts_1.getContractByCodeHash);
            },
            migrateWithFieldsApply: async (params) => {
                return (0, web3_1.testMethod)(this, "migrateWithFieldsApply", params, contracts_1.getContractByCodeHash);
            },
            resetUpgrade: async (params) => {
                return (0, web3_1.testMethod)(this, "resetUpgrade", params, contracts_1.getContractByCodeHash);
            },
            getUpgradeDelay: async (params) => {
                return (0, web3_1.testMethod)(this, "getUpgradeDelay", params, contracts_1.getContractByCodeHash);
            },
            getOwner: async (params) => {
                return (0, web3_1.testMethod)(this, "getOwner", params, contracts_1.getContractByCodeHash);
            },
            getNewOwner: async (params) => {
                return (0, web3_1.testMethod)(this, "getNewOwner", params, contracts_1.getContractByCodeHash);
            },
            getUpgradeCommenced: async (params) => {
                return (0, web3_1.testMethod)(this, "getUpgradeCommenced", params, contracts_1.getContractByCodeHash);
            },
            getNewCode: async (params) => {
                return (0, web3_1.testMethod)(this, "getNewCode", params, contracts_1.getContractByCodeHash);
            },
            resetFields: async (params) => {
                return (0, web3_1.testMethod)(this, "resetFields", params, contracts_1.getContractByCodeHash);
            },
            assertOnlyOwner: async (params) => {
                return (0, web3_1.testMethod)(this, "assertOnlyOwner", params, contracts_1.getContractByCodeHash);
            },
            assertUpgradeNotPending: async (params) => {
                return (0, web3_1.testMethod)(this, "assertUpgradeNotPending", params, contracts_1.getContractByCodeHash);
            },
            assertUpgradeDelayElapsed: async (params) => {
                return (0, web3_1.testMethod)(this, "assertUpgradeDelayElapsed", params, contracts_1.getContractByCodeHash);
            },
            swapExactTokenForToken: async (params) => {
                return (0, web3_1.testMethod)(this, "swapExactTokenForToken", params, contracts_1.getContractByCodeHash);
            },
            simulateSwapExactTokenForToken: async (params) => {
                return (0, web3_1.testMethod)(this, "simulateSwapExactTokenForToken", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new OnionRouterInstance(address);
    }
    stateForTest(initFields, asset, address) {
        return this.stateForTest_(initFields, asset, address, undefined);
    }
}
// Use this object to test and deploy the contract
exports.OnionRouter = new Factory(web3_1.Contract.fromJson(OnionRouter_ral_json_1.default, "", "333646eb5fd44384550d0291de7a624dd300494a000082bf4cd82761e6f57154", types_1.AllStructs));
// Use this class to interact with the blockchain
class OnionRouterInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.view = {
            changeOwner: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "changeOwner", params, contracts_1.getContractByCodeHash);
            },
            migrate: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "migrate", params, contracts_1.getContractByCodeHash);
            },
            changeOwnerApply: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "changeOwnerApply", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            migrateApply: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "migrateApply", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            migrateWithFieldsApply: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "migrateWithFieldsApply", params, contracts_1.getContractByCodeHash);
            },
            resetUpgrade: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "resetUpgrade", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getUpgradeDelay: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "getUpgradeDelay", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getOwner: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "getOwner", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getNewOwner: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "getNewOwner", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getUpgradeCommenced: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "getUpgradeCommenced", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getNewCode: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "getNewCode", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            resetFields: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "resetFields", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            assertOnlyOwner: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "assertOnlyOwner", params, contracts_1.getContractByCodeHash);
            },
            assertUpgradeNotPending: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "assertUpgradeNotPending", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            assertUpgradeDelayElapsed: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "assertUpgradeDelayElapsed", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            swapExactTokenForToken: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "swapExactTokenForToken", params, contracts_1.getContractByCodeHash);
            },
            simulateSwapExactTokenForToken: async (params) => {
                return (0, web3_1.callMethod)(exports.OnionRouter, this, "simulateSwapExactTokenForToken", params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            changeOwner: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "changeOwner", params);
            },
            migrate: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "migrate", params);
            },
            changeOwnerApply: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "changeOwnerApply", params);
            },
            migrateApply: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "migrateApply", params);
            },
            migrateWithFieldsApply: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "migrateWithFieldsApply", params);
            },
            resetUpgrade: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "resetUpgrade", params);
            },
            getUpgradeDelay: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "getUpgradeDelay", params);
            },
            getOwner: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "getOwner", params);
            },
            getNewOwner: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "getNewOwner", params);
            },
            getUpgradeCommenced: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "getUpgradeCommenced", params);
            },
            getNewCode: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "getNewCode", params);
            },
            resetFields: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "resetFields", params);
            },
            assertOnlyOwner: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "assertOnlyOwner", params);
            },
            assertUpgradeNotPending: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "assertUpgradeNotPending", params);
            },
            assertUpgradeDelayElapsed: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "assertUpgradeDelayElapsed", params);
            },
            swapExactTokenForToken: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "swapExactTokenForToken", params);
            },
            simulateSwapExactTokenForToken: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.OnionRouter, this, "simulateSwapExactTokenForToken", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.OnionRouter, this);
    }
    async getContractEventsCurrentCount() {
        return (0, web3_1.getContractEventsCurrentCount)(this.address);
    }
    subscribeChangeOwnerCommenceEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.OnionRouter.contract, this, options, "ChangeOwnerCommence", fromCount);
    }
    subscribeChangeOwnerApplyEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.OnionRouter.contract, this, options, "ChangeOwnerApply", fromCount);
    }
    subscribeMigrateCommenceEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.OnionRouter.contract, this, options, "MigrateCommence", fromCount);
    }
    subscribeMigrateApplyEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.OnionRouter.contract, this, options, "MigrateApply", fromCount);
    }
    subscribeMigrateWithFieldsApplyEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.OnionRouter.contract, this, options, "MigrateWithFieldsApply", fromCount);
    }
    subscribeTradeEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.OnionRouter.contract, this, options, "Trade", fromCount);
    }
    subscribeAllEvents(options, fromCount) {
        return (0, web3_1.subscribeContractEvents)(exports.OnionRouter.contract, this, options, fromCount);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.OnionRouter, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.OnionRouterInstance = OnionRouterInstance;
