"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfileTrackerInstance = exports.ProfileTracker = void 0;
const web3_1 = require("@alephium/web3");
const ProfileTracker_ral_json_1 = __importDefault(require("../value_add/ProfileTracker.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
const web3_2 = require("@alephium/web3");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.eventIndex = {
            ChangeOwnerCommence: 0,
            ChangeOwnerApply: 1,
            MigrateCommence: 2,
            MigrateApply: 3,
            MigrateWithFieldsApply: 4,
            CreateProfile: 5,
            UpdateProfile: 6,
            UpdateRouterAddress: 7,
            UpdateReferralSettings: 8,
        };
        this.consts = {
            UpgradeErrorCodes: {
                Forbidden: BigInt("13000"),
                UpgradePending: BigInt("13001"),
                UpgradeNotPending: BigInt("13002"),
                UpgradeDelayNotExpired: BigInt("13003"),
                MigrateNotPending: BigInt("13004"),
                MigrateWithFieldsNotPending: BigInt("13005"),
                ChangeOwnerNotPending: BigInt("13006"),
            },
        };
        this.tests = {
            changeOwner: async (params) => {
                return (0, web3_1.testMethod)(this, "changeOwner", params, contracts_1.getContractByCodeHash);
            },
            migrate: async (params) => {
                return (0, web3_1.testMethod)(this, "migrate", params, contracts_1.getContractByCodeHash);
            },
            changeOwnerApply: async (params) => {
                return (0, web3_1.testMethod)(this, "changeOwnerApply", params, contracts_1.getContractByCodeHash);
            },
            migrateApply: async (params) => {
                return (0, web3_1.testMethod)(this, "migrateApply", params, contracts_1.getContractByCodeHash);
            },
            migrateWithFieldsApply: async (params) => {
                return (0, web3_1.testMethod)(this, "migrateWithFieldsApply", params, contracts_1.getContractByCodeHash);
            },
            resetUpgrade: async (params) => {
                return (0, web3_1.testMethod)(this, "resetUpgrade", params, contracts_1.getContractByCodeHash);
            },
            getUpgradeDelay: async (params) => {
                return (0, web3_1.testMethod)(this, "getUpgradeDelay", params, contracts_1.getContractByCodeHash);
            },
            getOwner: async (params) => {
                return (0, web3_1.testMethod)(this, "getOwner", params, contracts_1.getContractByCodeHash);
            },
            getNewOwner: async (params) => {
                return (0, web3_1.testMethod)(this, "getNewOwner", params, contracts_1.getContractByCodeHash);
            },
            getUpgradeCommenced: async (params) => {
                return (0, web3_1.testMethod)(this, "getUpgradeCommenced", params, contracts_1.getContractByCodeHash);
            },
            getNewCode: async (params) => {
                return (0, web3_1.testMethod)(this, "getNewCode", params, contracts_1.getContractByCodeHash);
            },
            resetFields: async (params) => {
                return (0, web3_1.testMethod)(this, "resetFields", params, contracts_1.getContractByCodeHash);
            },
            assertOnlyOwner: async (params) => {
                return (0, web3_1.testMethod)(this, "assertOnlyOwner", params, contracts_1.getContractByCodeHash);
            },
            assertUpgradeNotPending: async (params) => {
                return (0, web3_1.testMethod)(this, "assertUpgradeNotPending", params, contracts_1.getContractByCodeHash);
            },
            assertUpgradeDelayElapsed: async (params) => {
                return (0, web3_1.testMethod)(this, "assertUpgradeDelayElapsed", params, contracts_1.getContractByCodeHash);
            },
            manageProfileSelf: async (params) => {
                return (0, web3_1.testMethod)(this, "manageProfileSelf", params, contracts_1.getContractByCodeHash);
            },
            manageProfileFromRouter: async (params) => {
                return (0, web3_1.testMethod)(this, "manageProfileFromRouter", params, contracts_1.getContractByCodeHash);
            },
            increaseXP: async (params) => {
                return (0, web3_1.testMethod)(this, "increaseXP", params, contracts_1.getContractByCodeHash);
            },
            rewardReferrer: async (params) => {
                return (0, web3_1.testMethod)(this, "rewardReferrer", params, contracts_1.getContractByCodeHash);
            },
            loadUserProfile: async (params) => {
                return (0, web3_1.testMethod)(this, "loadUserProfile", params, contracts_1.getContractByCodeHash);
            },
            updateRouterAddress: async (params) => {
                return (0, web3_1.testMethod)(this, "updateRouterAddress", params, contracts_1.getContractByCodeHash);
            },
            updateReferralSettings: async (params) => {
                return (0, web3_1.testMethod)(this, "updateReferralSettings", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new ProfileTrackerInstance(address);
    }
    stateForTest(initFields, asset, address, maps) {
        return this.stateForTest_(initFields, asset, address, maps);
    }
}
// Use this object to test and deploy the contract
exports.ProfileTracker = new Factory(web3_1.Contract.fromJson(ProfileTracker_ral_json_1.default, "=66-2+55=2-2+76=2-5+c=3-2+81=2-2+f6=1+515=1-2+53c=697-1+5=311-1+2=62+7a7e0214696e73657274206174206d617020706174683a2000=151-1+7=359-1+4=70+7a7e0214696e73657274206174206d617020706174683a2000=191-1+3=233-1+2=40+7a7e0214696e73657274206174206d617020706174683a2000=410", "d9bf59b4aa70c5e1fe9367f6eff69a4b6bbb08db275d72315998a18e5fb7a1ce", types_1.AllStructs));
// Use this class to interact with the blockchain
class ProfileTrackerInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.maps = {
            userProfileCollection: new web3_2.RalphMap(exports.ProfileTracker.contract, this.contractId, "userProfileCollection"),
        };
        this.view = {
            changeOwner: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "changeOwner", params, contracts_1.getContractByCodeHash);
            },
            migrate: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "migrate", params, contracts_1.getContractByCodeHash);
            },
            changeOwnerApply: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "changeOwnerApply", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            migrateApply: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "migrateApply", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            migrateWithFieldsApply: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "migrateWithFieldsApply", params, contracts_1.getContractByCodeHash);
            },
            resetUpgrade: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "resetUpgrade", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getUpgradeDelay: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "getUpgradeDelay", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getOwner: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "getOwner", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getNewOwner: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "getNewOwner", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getUpgradeCommenced: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "getUpgradeCommenced", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getNewCode: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "getNewCode", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            resetFields: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "resetFields", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            assertOnlyOwner: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "assertOnlyOwner", params, contracts_1.getContractByCodeHash);
            },
            assertUpgradeNotPending: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "assertUpgradeNotPending", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            assertUpgradeDelayElapsed: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "assertUpgradeDelayElapsed", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            manageProfileSelf: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "manageProfileSelf", params, contracts_1.getContractByCodeHash);
            },
            manageProfileFromRouter: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "manageProfileFromRouter", params, contracts_1.getContractByCodeHash);
            },
            increaseXP: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "increaseXP", params, contracts_1.getContractByCodeHash);
            },
            rewardReferrer: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "rewardReferrer", params, contracts_1.getContractByCodeHash);
            },
            loadUserProfile: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "loadUserProfile", params, contracts_1.getContractByCodeHash);
            },
            updateRouterAddress: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "updateRouterAddress", params, contracts_1.getContractByCodeHash);
            },
            updateReferralSettings: async (params) => {
                return (0, web3_1.callMethod)(exports.ProfileTracker, this, "updateReferralSettings", params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            changeOwner: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "changeOwner", params);
            },
            migrate: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "migrate", params);
            },
            changeOwnerApply: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "changeOwnerApply", params);
            },
            migrateApply: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "migrateApply", params);
            },
            migrateWithFieldsApply: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "migrateWithFieldsApply", params);
            },
            resetUpgrade: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "resetUpgrade", params);
            },
            getUpgradeDelay: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "getUpgradeDelay", params);
            },
            getOwner: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "getOwner", params);
            },
            getNewOwner: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "getNewOwner", params);
            },
            getUpgradeCommenced: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "getUpgradeCommenced", params);
            },
            getNewCode: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "getNewCode", params);
            },
            resetFields: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "resetFields", params);
            },
            assertOnlyOwner: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "assertOnlyOwner", params);
            },
            assertUpgradeNotPending: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "assertUpgradeNotPending", params);
            },
            assertUpgradeDelayElapsed: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "assertUpgradeDelayElapsed", params);
            },
            manageProfileSelf: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "manageProfileSelf", params);
            },
            manageProfileFromRouter: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "manageProfileFromRouter", params);
            },
            increaseXP: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "increaseXP", params);
            },
            rewardReferrer: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "rewardReferrer", params);
            },
            loadUserProfile: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "loadUserProfile", params);
            },
            updateRouterAddress: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "updateRouterAddress", params);
            },
            updateReferralSettings: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.ProfileTracker, this, "updateReferralSettings", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.ProfileTracker, this);
    }
    async getContractEventsCurrentCount() {
        return (0, web3_1.getContractEventsCurrentCount)(this.address);
    }
    subscribeChangeOwnerCommenceEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.ProfileTracker.contract, this, options, "ChangeOwnerCommence", fromCount);
    }
    subscribeChangeOwnerApplyEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.ProfileTracker.contract, this, options, "ChangeOwnerApply", fromCount);
    }
    subscribeMigrateCommenceEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.ProfileTracker.contract, this, options, "MigrateCommence", fromCount);
    }
    subscribeMigrateApplyEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.ProfileTracker.contract, this, options, "MigrateApply", fromCount);
    }
    subscribeMigrateWithFieldsApplyEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.ProfileTracker.contract, this, options, "MigrateWithFieldsApply", fromCount);
    }
    subscribeCreateProfileEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.ProfileTracker.contract, this, options, "CreateProfile", fromCount);
    }
    subscribeUpdateProfileEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.ProfileTracker.contract, this, options, "UpdateProfile", fromCount);
    }
    subscribeUpdateRouterAddressEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.ProfileTracker.contract, this, options, "UpdateRouterAddress", fromCount);
    }
    subscribeUpdateReferralSettingsEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.ProfileTracker.contract, this, options, "UpdateReferralSettings", fromCount);
    }
    subscribeAllEvents(options, fromCount) {
        return (0, web3_1.subscribeContractEvents)(exports.ProfileTracker.contract, this, options, fromCount);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.ProfileTracker, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.ProfileTrackerInstance = ProfileTrackerInstance;
