"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeeCollectorInstance = exports.FeeCollector = void 0;
const web3_1 = require("@alephium/web3");
const FeeCollector_ral_json_1 = __importDefault(require("../onion/FeeCollector.ral.json"));
const contracts_1 = require("./contracts");
const types_1 = require("./types");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.eventIndex = { DepositFee: 0, HarvestFee: 1 };
        this.consts = { ErrorCodes: { Unauthorized: BigInt("1") } };
        this.tests = {
            depositFee: async (params) => {
                return (0, web3_1.testMethod)(this, "depositFee", params, contracts_1.getContractByCodeHash);
            },
            harvest: async (params) => {
                return (0, web3_1.testMethod)(this, "harvest", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, types_1.AllStructs);
    }
    at(address) {
        return new FeeCollectorInstance(address);
    }
    stateForTest(initFields, asset, address) {
        return this.stateForTest_(initFields, asset, address, undefined);
    }
}
// Use this object to test and deploy the contract
exports.FeeCollector = new Factory(web3_1.Contract.fromJson(FeeCollector_ral_json_1.default, "", "b9869938bde02e371b216765f4a248764f889af0bacac7204cbd397db01844f8", types_1.AllStructs));
// Use this class to interact with the blockchain
class FeeCollectorInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.view = {
            depositFee: async (params) => {
                return (0, web3_1.callMethod)(exports.FeeCollector, this, "depositFee", params, contracts_1.getContractByCodeHash);
            },
            harvest: async (params) => {
                return (0, web3_1.callMethod)(exports.FeeCollector, this, "harvest", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            depositFee: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.FeeCollector, this, "depositFee", params);
            },
            harvest: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.FeeCollector, this, "harvest", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.FeeCollector, this);
    }
    async getContractEventsCurrentCount() {
        return (0, web3_1.getContractEventsCurrentCount)(this.address);
    }
    subscribeDepositFeeEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.FeeCollector.contract, this, options, "DepositFee", fromCount);
    }
    subscribeHarvestFeeEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.FeeCollector.contract, this, options, "HarvestFee", fromCount);
    }
    subscribeAllEvents(options, fromCount) {
        return (0, web3_1.subscribeContractEvents)(exports.FeeCollector.contract, this, options, fromCount);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.FeeCollector, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.FeeCollectorInstance = FeeCollectorInstance;
