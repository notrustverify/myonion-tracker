"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadDeployments = loadDeployments;
const _1 = require(".");
const _deployments_mainnet_json_1 = __importDefault(require("../../deployments/.deployments.mainnet.json"));
const _deployments_testnet_json_1 = __importDefault(require("../../deployments/.deployments.testnet.json"));
function toDeployments(json) {
    const contracts = {
        Token: {
            ...json.contracts["Token"],
            contractInstance: _1.Token.at(json.contracts["Token"].contractInstance.address),
        },
        FeeHandler: {
            ...json.contracts["FeeHandler"],
            contractInstance: _1.FeeHandler.at(json.contracts["FeeHandler"].contractInstance.address),
        },
        FeeCollector: {
            ...json.contracts["FeeCollector"],
            contractInstance: _1.FeeCollector.at(json.contracts["FeeCollector"].contractInstance.address),
        },
        OnionRouter: {
            ...json.contracts["OnionRouter"],
            contractInstance: _1.OnionRouter.at(json.contracts["OnionRouter"].contractInstance.address),
        },
        BondingPair: {
            ...json.contracts["BondingPair"],
            contractInstance: _1.BondingPair.at(json.contracts["BondingPair"].contractInstance.address),
        },
        DexPair: {
            ...json.contracts["DexPair"],
            contractInstance: _1.DexPair.at(json.contracts["DexPair"].contractInstance.address),
        },
        TokenLauncher: {
            ...json.contracts["TokenLauncher"],
            contractInstance: _1.TokenLauncher.at(json.contracts["TokenLauncher"].contractInstance.address),
        },
        ProfileTracker: {
            ...json.contracts["ProfileTracker"],
            contractInstance: _1.ProfileTracker.at(json.contracts["ProfileTracker"].contractInstance.address),
        },
        CommentTracker: {
            ...json.contracts["CommentTracker"],
            contractInstance: _1.CommentTracker.at(json.contracts["CommentTracker"].contractInstance.address),
        },
    };
    return {
        ...json,
        contracts: contracts,
        scripts: { SetFeeCollector: json.scripts["SetFeeCollector"] },
    };
}
function loadDeployments(networkId, deployerAddress) {
    const deployments = networkId === "mainnet"
        ? _deployments_mainnet_json_1.default
        : networkId === "testnet"
            ? _deployments_testnet_json_1.default
            : undefined;
    if (deployments === undefined) {
        throw Error("The contract has not been deployed to the " + networkId);
    }
    const allDeployments = Array.isArray(deployments)
        ? deployments
        : [deployments];
    if (deployerAddress === undefined) {
        if (allDeployments.length > 1) {
            throw Error("The contract has been deployed multiple times on " +
                networkId +
                ", please specify the deployer address");
        }
        else {
            return toDeployments(allDeployments[0]);
        }
    }
    const result = allDeployments.find((d) => d.deployerAddress === deployerAddress);
    if (result === undefined) {
        throw Error("The contract deployment result does not exist");
    }
    return toDeployments(result);
}
